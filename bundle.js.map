{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://otus-js-basics-lesson-12-hw/./src/js/types.ts","webpack://otus-js-basics-lesson-12-hw/./src/js/drawField.ts","webpack://otus-js-basics-lesson-12-hw/./src/js/getCellState.ts","webpack://otus-js-basics-lesson-12-hw/./src/js/getNewCellState.ts","webpack://otus-js-basics-lesson-12-hw/./src/js/createGameOfLife.ts","webpack://otus-js-basics-lesson-12-hw/./src/js/getNextState.ts","webpack://otus-js-basics-lesson-12-hw/./src/js/getNumOfAliveNeighbours.ts","webpack://otus-js-basics-lesson-12-hw/./src/js/isAnyoneAlive.ts","webpack://otus-js-basics-lesson-12-hw/./src/js/index.ts"],"sourcesContent":["export enum cellState {\n  DEAD = 0,\n  ALIVE,\n  DOOMED,\n}\n\nexport type tField = number[][];\nexport type tRow = cellState[];\nexport interface iOnCellClick {\n  (x: number, y: number): void;\n}\n\nexport interface iRunInterval {\n  (speed: number): number;\n}\n\nexport interface iGetCellState {\n  (field: tField, x: number, y: number): number;\n}\n\nexport interface iAliveNeighboursNum {\n  (column: number, row: number, field: tField): number;\n}\n\nexport interface iNextState {\n  (field: tField): tField;\n}\n","import { cellState, iOnCellClick, tField, tRow } from \"./types\";\n\n/**\n * отрисовка поля\n * @param htmlElement {HTMLElement} - элемент, в котором будет отрисовано поле\n * @param field {number[][]} - состояние поля\n * @param onCellClick {(x: number, y: number) => void}\n * @returns void\n */\nfunction drawCell(x: number, y: number, state: cellState): string {\n  return `<td data-x=${x} data-y=${y} class=\"cell cell--${getCellCls(state)}\"></td>`;\n}\n\nfunction getCellCls(state: cellState): string {\n  switch (state) {\n    case cellState.ALIVE:\n      return \"alive\";\n    case cellState.DEAD:\n      return \"dead\";\n    case cellState.DOOMED:\n      return \"doomed\";\n  }\n}\n\nexport function drawField(htmlElement: HTMLElement, field: tField, onCellClick: iOnCellClick) {\n  const rowIterator = (row: tRow, rowIndex: number) => {\n    return `<tr>${row\n      .map((cell: cellState, columnIndex) => {\n        return drawCell(columnIndex, rowIndex, cell);\n      })\n      .join(\"\")}</tr>`;\n  };\n\n  const table = `<table border=1>${field.map(rowIterator).join(\"\")}</table>`;\n\n  // eslint-disable-next-line no-param-reassign\n  htmlElement.innerHTML = table;\n  const elTable = htmlElement.querySelector(\"table\") as HTMLElement;\n\n  elTable.addEventListener(\"click\", (ev) => {\n    const clickedElement = ev.target as HTMLElement;\n    const x = Number(clickedElement.getAttribute(\"data-x\"));\n    const y = Number(clickedElement.getAttribute(\"data-y\"));\n    if (x >= 0 && y >= 0) {\n      onCellClick(x, y);\n    }\n  });\n}\n","import { iGetCellState, tField } from \"./types\";\n\n/**\n * получить состояние клетки\n * @param field {number[][]} - состояние поля\n * @param x {number} - номер колонки\n * @param y {number} - номер строки\n * @return number\n */\n\nexport const getCellState: iGetCellState = function (field: tField, x: number, y: number): number {\n  const row = field[y];\n  if (row === undefined) {\n    return 0;\n  }\n  const cell = row[x];\n  if (cell === undefined) {\n    return 0;\n  }\n  return Number(cell);\n};\n","import { cellState } from \"./types\";\n\nfunction isAlive(currentCellState: number): boolean {\n  return currentCellState === cellState.ALIVE;\n}\nexport function getNewCellState(currentCellState: number, numOfAliveNeighbours: number): cellState {\n  if (numOfAliveNeighbours === 3 || (numOfAliveNeighbours === 2 && isAlive(currentCellState))) {\n    return cellState.ALIVE;\n  }\n\n  if (isAlive(currentCellState) && (numOfAliveNeighbours < 2 || numOfAliveNeighbours > 3)) {\n    return cellState.DOOMED;\n  }\n\n  return cellState.DEAD;\n}\n","/* eslint-disable no-param-reassign */\n\nimport { drawField } from \"./drawField\";\nimport { getNextState } from \"./getNextState\";\nimport { isAnyoneAlive } from \"./isAnyoneAlive\";\nimport { cellState, iOnCellClick, iRunInterval, tField, tRow } from \"./types\";\n\nconst DEFAULT_GAME_SPEED = 2000;\n\n/**\n * Создание игры Жизнь\n * @param cols {number} - число колонок\n * @param rows {number} - число строк\n * @param htmlElement {HTMLElement} - элемент, в котором будет отрисована игра\n * @returns void\n */\nexport function createGameOfLife(cols: number, rows: number, htmlElement: HTMLElement) {\n  let gameIsRunning = false;\n  let timer: number;\n  let sizeX = cols;\n  let sizeY = rows;\n\n  // Создать блок для поля\n  // Создать кнопку управления игрой\n  htmlElement.classList.add(\"game\");\n  htmlElement.innerHTML = `\n    \n    <div class=\"game__controls\">\n        <div class=\"game__controls-item\">\n          <label>\n            <input type=\"number\" class=\"game__speed\" value=\"${DEFAULT_GAME_SPEED}\"/>\n            game speed\n          </label>\n        </div>\n        <div class=\"game__controls-item\">\n          <label>\n            <input type=\"number\" class=\"game__rows\" value=\"${sizeX}\"/>\n            rows\n          </label>\n        </div>\n        <div class=\"game__controls-item\">\n          <label>\n            <input type=\"number\" class=\"game__cols\" value=\"${sizeY}\"/>\n            cols\n          </label>\n        </div>\n        <div class=\"game__controls-item\">\n            <button class=\"game__random-fill-btn\">Random fill</button>\n        </div>\n        <div class=\"game__controls-item\">\n            <button class=\"game__run-btn\">Start</button>\n        </div>\n    </div>\n    <div class=\"game__field\"></div>\n    <hr>\n`;\n  const fieldWrapper = htmlElement.querySelector(\".game__field\") as HTMLElement;\n  const btnStart = htmlElement.querySelector(\".game__run-btn\") as HTMLButtonElement;\n  const btnRandomFill = htmlElement.querySelector(\".game__random-fill-btn\") as HTMLButtonElement;\n  const gameSpeedInput = htmlElement.querySelector(\".game__speed\") as HTMLInputElement;\n  const gameRowsInput = htmlElement.querySelector(\".game__rows\") as HTMLInputElement;\n  const gameColsInput = htmlElement.querySelector(\".game__cols\") as HTMLInputElement;\n\n  let field: tField = [];\n  for (let i = 0; i < sizeY; i++) {\n    const row: tRow = [];\n    for (let j = 0; j < sizeX; j++) {\n      row.push(0);\n    }\n    field.push(row);\n  }\n\n  const runInterval: iRunInterval = (speed: number): number => {\n    return Number(\n      setInterval(() => {\n        // В таймере обновления поля\n        // - посчитать новое состояние поля\n        // - отрисовать новое состояние поля\n        // - проверить, что есть живые клетки\n        // - если живых клеток нет\n        //    - остановить таймер\n        //    - вывести сообщение\n        field = getNextState(field);\n        drawField(fieldWrapper, field, cellClickHandler);\n        if (!isAnyoneAlive(field)) {\n          alert(\"Death on the block\");\n          stopGame();\n        }\n      }, speed)\n    );\n  };\n\n  const cellClickHandler: iOnCellClick = (x: number, y: number): void => {\n    field[y][x] = field[y][x] === cellState.DEAD ? cellState.ALIVE : cellState.DEAD;\n    drawField(fieldWrapper, field, cellClickHandler);\n  };\n\n  // Отрисовать поле заданного размера\n  drawField(fieldWrapper, field, cellClickHandler);\n  // При клике по ячейке поля\n  // - поменять его состояние\n  // - перерисовать поле\n  function stopGame(): void {\n    gameIsRunning = false;\n    btnStart.innerHTML = \"Start\";\n    // При клике на кнопке `Stop` остановить таймер\n    clearInterval(timer);\n  }\n\n  function startGame(): void {\n    // При клике по кнопке старт\n    // - поменять надпись на `Stop`\n    gameIsRunning = true;\n    btnStart.innerHTML = \"Stop\";\n    // - запустить таймер для обновления поля\n    const speed = Number(gameSpeedInput.value);\n    timer = runInterval(speed);\n  }\n\n  btnStart.addEventListener(\"click\", () => {\n    if (gameIsRunning) {\n      stopGame();\n    } else {\n      startGame();\n    }\n  });\n\n  btnRandomFill.addEventListener(\"click\", () => {\n    for (let i = 0; i < field.length; i++) {\n      for (let j = 0; j < field[i].length; j++) {\n        field[i][j] = Math.random() >= 0.5 ? 1 : 0;\n      }\n    }\n    drawField(fieldWrapper, field, cellClickHandler);\n  });\n\n  gameSpeedInput.addEventListener(\"change\", () => {\n    if (gameIsRunning) {\n      stopGame();\n      startGame();\n    }\n  });\n\n  gameRowsInput.addEventListener(\"change\", (e) => {\n    const target = e.target as HTMLInputElement;\n    const rows = Number(target.value);\n    if (rows > field.length) {\n      for (let i = rows - sizeY; i > 0; i--) {\n        const row: tRow = [];\n        for (let j = 0; j < sizeX; j++) {\n          row.push(0);\n        }\n        field.push(row);\n      }\n    } else {\n      field.splice(rows - sizeY);\n    }\n\n    sizeY = rows;\n    drawField(fieldWrapper, field, cellClickHandler);\n  });\n\n  gameColsInput.addEventListener(\"change\", (e) => {\n    const target = e.target as HTMLInputElement;\n    const cols = Number(target.value);\n\n    for (let i = 0; i < sizeY; i++) {\n      if (field[i].length < cols) {\n        field[i].push(0);\n      } else {\n        field[i].splice(cols - sizeX);\n      }\n    }\n    sizeX = cols;\n    drawField(fieldWrapper, field, cellClickHandler);\n  });\n}\n","import { getNumOfAliveNeighbours } from \"./getNumOfAliveNeighbours\";\nimport { getCellState } from \"./getCellState\";\nimport { getNewCellState } from \"./getNewCellState\";\nimport { iNextState, tField, tRow } from \"./types\";\n\n/**\n * получить новое состояние\n * @param field {number[][]} - состояние поля\n * @return number[][] - новое состояние поля\n */\nexport const getNextState: iNextState = function (field: tField): tField {\n  return field.map((row: tRow, rowIndex: number) =>\n    row.map((cell: number, cellIndex: number) => {\n      const an = getNumOfAliveNeighbours(cellIndex, rowIndex, field);\n      const currentState = getCellState(field, cellIndex, rowIndex);\n      return getNewCellState(currentState, an);\n    })\n  );\n};\n","import { getCellState } from \"./getCellState\";\nimport { cellState, iAliveNeighboursNum, tField } from \"./types\";\n\n/**\n * узнать сколько живых соседей вокруг клетки\n * @param column {number} - номер колонки\n * @param row {number} - номер строки\n * @param field {number[][]} - состояние поля\n * @return number - число живых соседей\n */\nexport const getNumOfAliveNeighbours: iAliveNeighboursNum = function (\n  column: number,\n  row: number,\n  field: tField\n): number {\n  let neighbours = 0;\n\n  for (let j = column - 1; j <= column + 1; j += 1) {\n    neighbours += getCellState(field, j, row - 1) === cellState.DEAD ? 0 : 1;\n  }\n\n  for (let j = column - 1; j <= column + 1; j += 1) {\n    neighbours += getCellState(field, j, row + 1) === cellState.DEAD ? 0 : 1;\n  }\n\n  neighbours += getCellState(field, column - 1, row) === cellState.DEAD ? 0 : 1;\n  neighbours += getCellState(field, column + 1, row) === cellState.DEAD ? 0 : 1;\n\n  return neighbours;\n};\n","import { tField, tRow } from \"./types\";\n\n/**\n * проверка что есть живые клетки\n * @param field {number[][]} - состояние поля\n * @return boolean\n */\nexport function isAnyoneAlive(field: tField): boolean {\n  for (let i = 0; i < field.length; i += 1) {\n    const row: tRow = field[i];\n    for (let j = 0; j < row.length; j += 1) {\n      const cell = row[j];\n      if (cell) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n","import \"../css/style.scss\";\nimport { createGameOfLife } from \"./createGameOfLife\";\n\nconst gameWrapper1 = document.createElement(\"div\");\nconst gameWrapper2 = document.createElement(\"div\");\n\ndocument.body.appendChild(gameWrapper1);\ndocument.body.appendChild(gameWrapper2);\n\ncreateGameOfLife(3, 3, gameWrapper1);\ncreateGameOfLife(10, 10, gameWrapper2);\n"],"names":["cellState","drawField","htmlElement","field","onCellClick","table","map","row","rowIndex","cell","columnIndex","y","state","ALIVE","DEAD","DOOMED","getCellCls","join","innerHTML","querySelector","addEventListener","ev","clickedElement","target","x","Number","getAttribute","getCellState","undefined","isAlive","currentCellState","createGameOfLife","cols","rows","timer","gameIsRunning","sizeX","sizeY","classList","add","fieldWrapper","btnStart","btnRandomFill","gameSpeedInput","gameRowsInput","gameColsInput","i","j","push","cellClickHandler","stopGame","clearInterval","startGame","speed","value","setInterval","cellIndex","numOfAliveNeighbours","an","column","neighbours","getNumOfAliveNeighbours","getNextState","length","isAnyoneAlive","alert","runInterval","Math","random","e","splice","gameWrapper1","document","createElement","gameWrapper2","body","appendChild"],"sourceRoot":""}